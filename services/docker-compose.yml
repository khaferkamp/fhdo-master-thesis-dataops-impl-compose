version: '3.9'
services:
  minio:
    hostname: minio
    image: 'minio/minio:RELEASE.2022-11-29T23-40-49Z'
    container_name: minio
    ports:
      - '9000:9000'
      - '9001:9001'
    networks:
      - aionet
    volumes:
      - '$MINIO_HOME/data:/data'
    environment:
      - MINIO_ROOT_USER=$MINIO_ROOT_USER
      - MINIO_ROOT_PASSWORD=$MINIO_ROOT_PASSWORD
    command: 'server /data --console-address ":9001"'
    healthcheck:
      test:
        - CMD
        - curl
        - '-f'
        - 'http://$DOMAIN:9000/minio/health/live'
      interval: 5s
      timeout: 5s
      retries: 5
  mc:
    image: 'minio/mc:RELEASE.2022-11-17T21-20-39Z'
    container_name: mc
    hostname: mc
    networks:
      - aionet
    environment:
      - AWS_ACCESS_KEY_ID=$MINIO_ACCESS_KEY_ID
      - AWS_SECRET_ACCESS_KEY=$MINIO_SECRET_ACCESS_KEY
      - AWS_REGION=us-east-1
    entrypoint: >
      /bin/sh -c " until (/usr/bin/mc config host add minio http://$DOMAIN:9000
      $MINIO_ACCESS_KEY_ID $MINIO_SECRET_ACCESS_KEY) do echo '...waiting...' &&
      sleep 1; done; /usr/bin/mc mb minio/lakehouse; /usr/bin/mc policy set
      public minio/lakehouse; exit 0; "     
    depends_on:
      minio:
        condition: service_healthy
  gitlab:
    image: 'gitlab/gitlab-ce:15.6.1-ce.0'
    restart: always
    hostname: gitlab
    container_name: gitlab
    environment:
      GITLAB_OMNIBUS_CONFIG: |
        external_url 'https://$DOMAIN'
        # Add any other gitlab.rb configuration here, each on its own line
      GITLAB_ROOT_PASSWORD: $GITLAB_ROOT_PASSWORD
    networks:
      - aionet
    ports:
      - '9080:80'
      - '9443:443'
      - '9022:22'
    volumes:
      - '$GITLAB_HOME/config:/etc/gitlab'
      - '$GITLAB_HOME/logs:/var/log/gitlab'
      - '$GITLAB_HOME/data:/var/opt/gitlab'
    shm_size: 256m
  dind:
    image: 'docker:20-dind'
    restart: always
    container_name: dind
    networks:
      - aionet
    privileged: true
    environment:
      DOCKER_TLS_CERTDIR: ''
    command:
      - '--storage-driver=overlay2'
    volumes:
      - './data/dind/docker:/var/lib/docker'
  gitlab_runner:
    restart: always
    image: 'registry.gitlab.com/gitlab-org/gitlab-runner:alpine'
    container_name: gitlab_runner
    networks:
      - aionet
    volumes:
      - './gitlab-runner/config:/etc/gitlab-runner:z'
      - './data/gitlab-runner/cache:/cache'
    environment:
      - 'DOCKER_HOST=tcp://dind:2375'
  gitlab_register_runner:
    restart: 'no'
    image: 'registry.gitlab.com/gitlab-org/gitlab-runner:alpine'
    container_name: gitlab_register_runner
    networks:
      - aionet
    depends_on:
      - dind
    environment:
      - 'CI_SERVER_URL=${CI_SERVER_URL}'
      - 'REGISTRATION_TOKEN=${REGISTRATION_TOKEN}'
    command:
      - register
      - '--non-interactive'
      - '--locked=false'
      - '--name=${RUNNER_NAME}'
      - '--executor=docker'
      - '--docker-image=docker:20-dind'
      - '--docker-volumes=/var/run/docker.sock:/var/run/docker.sock'
    volumes:
      - './gitlab-runner/config:/etc/gitlab-runner:z'
      - './data/dind/docker:/var/lib/docker'
  trino:
    image: 'trinodb/trino:403'
    container_name: trino
    hostname: trino
    networks:
      - aionet
    ports:
      - '8060:8080'
  analytical_db:
    image: 'postgres:15.1'
    hostname: analytical_db
    container_name: analytical_db
    environment:
      - POSTGRES_PASSWORD=$PG_DB_PASSWORD
      - POSTGRES_USER=$PG_DB_USER
      - POSTGRES_DB=$PG_DB_NAME
    networks:
      - aionet
    ports:
      - '5432:5432'
    shm_size: 4gb
    healthcheck:
      test:
        - CMD-SHELL
        - pg_isready -U $PG_DB_USER
      interval: 5s
      timeout: 5s
      retries: 5
  aio:
    image: >-
      registry.digitalocean.com/registry-thesis-dataops-prototyp-compose/aio:latest
    container_name: aio
    environment:
      - AWS_ACCESS_KEY_ID=$MINIO_ACCESS_KEY_ID
      - AWS_SECRET_ACCESS_KEY=$MINIO_SECRET_ACCESS_KEY
      - AWS_REGION=us-east-1
    volumes:
      - './data/html:/var/lib/beast/html'
      - './data/stage:/var/lib/beast/stage'
      - './data/spark/notebooks:/var/lib/beast/notebooks'
      - './projects/dagster:/var/lib/beast/dagster'
      - './projects/dbt:/var/lib/beast/dbt'
    ports:
      - '8888:8888'
      - '7077:7077'
      - '8061:8061'
      - '8062:8062'
      - '10000:10000'
      - '10009:10009'
      - '18080:18080'
      - '3070:3070'
      - '9083:9083'
    command:
      - notebook
    networks:
      aionet:
        aliases:
          - spark
          - dagster
          - dbt
          - metastore
          - aio
    depends_on:
      analytical_db:
        condition: service_healthy
      minio:
        condition: service_healthy
  superset:
    image: apache/superset
    container_name: superset
    hostname: superset
    expose:
      - '8088:8088'
    depends_on:
      analytical_db:
        condition: service_healthy
      minio:
        condition: service_healthy
  rocketchat:
    image: 'registry.rocket.chat/rocketchat/rocket.chat:${RELEASE:-latest}'
    restart: on-failure
    hostname: rocketchat
    container_name: rocketchat
    environment:
      MONGO_URL: >-
        ${MONGO_URL:-mongodb://${MONGODB_ADVERTISED_HOSTNAME:-mongodb}:${MONGODB_INITIAL_PRIMARY_PORT_NUMBER:-27017}/${MONGODB_DATABASE:-rocketchat}?replicaSet=${MONGODB_REPLICA_SET_NAME:-rs0}}
      MONGO_OPLOG_URL: >-
        ${MONGO_OPLOG_URL:-mongodb://${MONGODB_ADVERTISED_HOSTNAME:-mongodb}:${MONGODB_INITIAL_PRIMARY_PORT_NUMBER:-27017}/local?replicaSet=${MONGODB_REPLICA_SET_NAME:-rs0}}
      ROOT_URL: '${ROOT_URL:-http://$DOMAIN:${RC_HOST_PORT:-3000}}'
      PORT: '${PORT:-3000}'
      DEPLOY_METHOD: docker
      DEPLOY_PLATFORM: '${DEPLOY_PLATFORM}'
    depends_on:
      - mongodb
    expose:
      - '${RC_PORT:-3000}'
    ports:
      - '${BIND_IP:-0.0.0.0}:${RC_HOST_PORT:-3000}:${RC_PORT:-3000}'
  mongodb:
    image: 'docker.io/bitnami/mongodb:${MONGODB_VERSION:-4.4}'
    restart: on-failure
    hostname: mongodb
    container_name: rocketchat_mongo
    volumes:
      - 'mongodb_data:/bitnami/mongodb'
    environment:
      MONGODB_REPLICA_SET_MODE: primary
      MONGODB_REPLICA_SET_NAME: '${MONGODB_REPLICA_SET_NAME:-rs0}'
      MONGODB_PORT_NUMBER: '${MONGODB_PORT_NUMBER:-27017}'
      MONGODB_INITIAL_PRIMARY_HOST: '${MONGODB_INITIAL_PRIMARY_HOST:-mongodb}'
      MONGODB_INITIAL_PRIMARY_PORT_NUMBER: '${MONGODB_INITIAL_PRIMARY_PORT_NUMBER:-27017}'
      MONGODB_ADVERTISED_HOSTNAME: '${MONGODB_ADVERTISED_HOSTNAME:-mongodb}'
      MONGODB_ENABLE_JOURNAL: '${MONGODB_ENABLE_JOURNAL:-true}'
      ALLOW_EMPTY_PASSWORD: '${ALLOW_EMPTY_PASSWORD:-yes}'
  mariadb:
    image: mariadb
    hostname: mariadb
    container_name: mariadb
    ports:
      - '33306:3306'
    volumes:
      - './data/mariadb:/var/lib/mysql'
      - './conf/mysql/init.sql:/docker-entrypoint-initdb.d/init.sql'
    environment:
      - MYSQL_ROOT_PASSWORD=admin
      - MYSQL_USER=admin
      - MYSQL_PASSWORD=admin
      - MYSQL_DATABASE=metastore_db
    networks:
      - ndsnet
  broker:
    container_name: broker
    depends_on:
      - zookeeper
    environment:
      - KAFKA_BROKER_ID=1
      - 'KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181'
      - >-
        KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      - >-
        KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS=0
      - KAFKA_HEAP_OPTS=-Xms256m -Xmx256m
    hostname: broker
    image: 'confluentinc/cp-kafka:5.4.0'
    ports:
      - '29092:29092'
      - '9092:9092'
    networks:
      - ndsnet
  datahub-actions:
    depends_on:
      - datahub-gms
    environment:
      - DATAHUB_GMS_HOST=datahub-gms
      - GMS_HOST=datahub-gms
      - DATAHUB_GMS_PORT=8080
      - GMS_PORT=8080
      - 'KAFKA_BOOTSTRAP_SERVER=broker:29092'
      - 'SCHEMA_REGISTRY_URL=http://schema-registry:8081'
      - METADATA_AUDIT_EVENT_NAME=MetadataAuditEvent_v4
      - METADATA_CHANGE_LOG_VERSIONED_TOPIC_NAME=MetadataChangeLog_Versioned_v1
      - DATAHUB_SYSTEM_CLIENT_ID=__datahub_system
      - DATAHUB_SYSTEM_CLIENT_SECRET=JohnSnowKnowsNothing
      - KAFKA_PROPERTIES_SECURITY_PROTOCOL=PLAINTEXT
    volumes:
      - './projects/dbt:/dbt'
    hostname: actions
    image: 'acryldata/datahub-actions:${ACTIONS_VERSION:-head}'
    restart: 'on-failure:5'
    networks:
      - ndsnet
  datahub-frontend-react:
    container_name: datahub-frontend-react
    depends_on:
      - datahub-gms
    environment:
      - DATAHUB_GMS_HOST=datahub-gms
      - DATAHUB_GMS_PORT=8080
      - DATAHUB_SECRET=YouKnowNothing
      - DATAHUB_APP_VERSION=1.0
      - DATAHUB_PLAY_MEM_BUFFER_SIZE=10MB
      - >-
        JAVA_OPTS=-Xms512m -Xmx512m -Dhttp.port=9002
        -Dconfig.file=datahub-frontend/conf/application.conf
        -Djava.security.auth.login.config=datahub-frontend/conf/jaas.conf
        -Dlogback.configurationFile=datahub-frontend/conf/logback.xml
        -Dlogback.debug=false -Dpidfile.path=/dev/null
      - 'KAFKA_BOOTSTRAP_SERVER=broker:29092'
      - DATAHUB_TRACKING_TOPIC=DataHubUsageEvent_v1
      - ELASTIC_CLIENT_HOST=elasticsearch
      - ELASTIC_CLIENT_PORT=9200
    hostname: datahub-frontend-react
    image: 'linkedin/datahub-frontend-react:${DATAHUB_VERSION:-head}'
    ports:
      - '9002:9002'
    networks:
      - ndsnet
    volumes:
      - '${HOME}/.datahub/plugins:/etc/datahub/plugins'
  datahub-gms:
    container_name: datahub-gms
    depends_on:
      - mariadb
    environment:
      - DATASET_ENABLE_SCSI=false
      - EBEAN_DATASOURCE_USERNAME=root
      - EBEAN_DATASOURCE_PASSWORD=admin
      - 'EBEAN_DATASOURCE_HOST=mariadb:3306'
      - >-
        EBEAN_DATASOURCE_URL=jdbc:mysql://mariadb:3306/datahub?verifyServerCertificate=false&useSSL=true&useUnicode=yes&characterEncoding=UTF-8
      - EBEAN_DATASOURCE_DRIVER=com.mysql.jdbc.Driver
      - 'KAFKA_BOOTSTRAP_SERVER=broker:29092'
      - 'KAFKA_SCHEMAREGISTRY_URL=http://schema-registry:8081'
      - ELASTICSEARCH_HOST=elasticsearch
      - ELASTICSEARCH_PORT=9200
      - GRAPH_SERVICE_IMPL=elasticsearch
      - JAVA_OPTS=-Xms1g -Xmx1g
      - >-
        ENTITY_REGISTRY_CONFIG_PATH=/datahub/datahub-gms/resources/entity-registry.yml
      - MAE_CONSUMER_ENABLED=true
      - MCE_CONSUMER_ENABLED=true
      - 'DATAHUB_SERVER_TYPE=${DATAHUB_SERVER_TYPE:-quickstart}'
      - 'DATAHUB_TELEMETRY_ENABLED=${DATAHUB_TELEMETRY_ENABLED:-true}'
      - PE_CONSUMER_ENABLED=true
    hostname: datahub-gms
    image: 'linkedin/datahub-gms:${DATAHUB_VERSION:-head}'
    ports:
      - '8080:8080'
    volumes:
      - '${HOME}/.datahub/plugins:/etc/datahub/plugins'
    networks:
      - aionet
  elasticsearch:
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - ES_JAVA_OPTS=-Xms256m -Xmx256m -Dlog4j2.formatMsgNoLookups=true
    healthcheck:
      retries: 4
      start_period: 2m
      test:
        - CMD-SHELL
        - >-
          curl -sS --fail
          'http://localhost:9200/_cluster/health?wait_for_status=yellow&timeout=0s'
          || exit 1
    hostname: elasticsearch
    image: 'elasticsearch:7.9.3'
    mem_limit: 1g
    ports:
      - '9200:9200'
    volumes:
      - './data/elasticsearch:/usr/share/elasticsearch/data'
    networks:
      - aionet
  elasticsearch-setup:
    container_name: elasticsearch-setup
    depends_on:
      - elasticsearch
    environment:
      - ELASTICSEARCH_HOST=elasticsearch
      - ELASTICSEARCH_PORT=9200
      - ELASTICSEARCH_PROTOCOL=http
    hostname: elasticsearch-setup
    image: 'linkedin/datahub-elasticsearch-setup:${DATAHUB_VERSION:-head}'
    networks:
      - aionet
  kafka-setup:
    container_name: kafka-setup
    depends_on:
      - broker
      - schema-registry
    environment:
      - 'KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181'
      - 'KAFKA_BOOTSTRAP_SERVER=broker:29092'
    hostname: kafka-setup
    image: 'linkedin/datahub-kafka-setup:${DATAHUB_VERSION:-head}'
    networks:
      - aionet
  mysql-setup:
    container_name: mysql-setup
    depends_on:
      - mariadb
    environment:
      - MYSQL_HOST=mariadb
      - MYSQL_PORT=3306
      - MYSQL_USERNAME=root
      - MYSQL_PASSWORD=admin
      - DATAHUB_DB_NAME=datahub
    hostname: mysql-setup
    image: 'acryldata/datahub-mysql-setup:${DATAHUB_VERSION:-head}'
    networks:
      - aionet
  schema-registry:
    container_name: schema-registry
    depends_on:
      - zookeeper
      - broker
    environment:
      - SCHEMA_REGISTRY_HOST_NAME=schemaregistry
      - 'SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL=zookeeper:2181'
    hostname: schema-registry
    image: 'confluentinc/cp-schema-registry:5.4.0'
    ports:
      - '8081:8081'
    networks:
      - aionet
  zookeeper:
    container_name: zookeeper
    environment:
      - ZOOKEEPER_CLIENT_PORT=2181
      - ZOOKEEPER_TICK_TIME=2000
    hostname: zookeeper
    image: 'confluentinc/cp-zookeeper:5.4.0'
    ports:
      - '2181:2181'
    volumes:
      - './data/zookeeper:/var/opt/zookeeper'
    networks:
      - aionet
networks:
  aionet:
    driver: bridge
volumes:
  mongodb_data:
    driver: local
