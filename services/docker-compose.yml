version: '3.9'
services:
  minio:
    hostname: minio
    image: 'minio/minio:RELEASE.2022-11-29T23-40-49Z'
    container_name: minio
    ports:
      - '9000:9000'
      - '9001:9001'
    networks:
      - aionet
    volumes:
      - '$MINIO_HOME/data:/data'
    environment:
      - MINIO_ROOT_USER=$MINIO_ROOT_USER
      - MINIO_ROOT_PASSWORD=$MINIO_ROOT_PASSWORD
    command: 'server /data --console-address ":9001"'
    healthcheck:
      test:
        - CMD
        - curl
        - '-f'
        - 'http://$DOMAIN:9000/minio/health/live'
      interval: 5s
      timeout: 5s
      retries: 5
  mc:
    image: 'minio/mc:RELEASE.2022-11-17T21-20-39Z'
    container_name: mc
    hostname: mc
    networks:
      - aionet
    environment:
      - AWS_ACCESS_KEY_ID=$MINIO_ACCESS_KEY_ID
      - AWS_SECRET_ACCESS_KEY=$MINIO_SECRET_ACCESS_KEY
      - AWS_REGION=us-east-1
    entrypoint: >
      /bin/sh -c " until (/usr/bin/mc config host add minio http://$DOMAIN:9000
      $MINIO_ACCESS_KEY_ID $MINIO_SECRET_ACCESS_KEY) do echo '...waiting...' &&
      sleep 1; done; /usr/bin/mc mb minio/lakehouse; /usr/bin/mc policy set
      public minio/lakehouse; exit 0; "     
    depends_on:
      minio:
        condition: service_healthy
  gitlab:
    image: 'gitlab/gitlab-ce:15.6.1-ce.0'
    restart: always
    hostname: gitlab
    container_name: gitlab
    environment:
      GITLAB_OMNIBUS_CONFIG: |
        external_url 'https://$DOMAIN'
        # Add any other gitlab.rb configuration here, each on its own line
      GITLAB_ROOT_PASSWORD: $GITLAB_ROOT_PASSWORD
    networks:
      - aionet
    ports:
      - '9080:80'
      - '9443:443'
      - '9022:22'
    volumes:
      - '$GITLAB_HOME/config:/etc/gitlab'
      - '$GITLAB_HOME/logs:/var/log/gitlab'
      - '$GITLAB_HOME/data:/var/opt/gitlab'
    shm_size: 256m
  dind:
    image: 'docker:20-dind'
    restart: always
    container_name: dind
    networks:
      - aionet
    privileged: true
    environment:
      DOCKER_TLS_CERTDIR: ''
    command:
      - '--storage-driver=overlay2'
    volumes:
      - './data/dind/docker:/var/lib/docker'
  gitlab_runner:
    restart: always
    image: 'registry.gitlab.com/gitlab-org/gitlab-runner:alpine'
    container_name: gitlab_runner
    networks:
      - aionet
    volumes:
      - './gitlab-runner/config:/etc/gitlab-runner:z'
      - './data/gitlab-runner/cache:/cache'
    environment:
      - 'DOCKER_HOST=tcp://dind:2375'
  gitlab_register_runner:
    restart: 'no'
    image: 'registry.gitlab.com/gitlab-org/gitlab-runner:alpine'
    container_name: gitlab_register_runner
    networks:
      - aionet
    depends_on:
      - dind
    environment:
      - 'CI_SERVER_URL=${CI_SERVER_URL}'
      - 'REGISTRATION_TOKEN=${REGISTRATION_TOKEN}'
    command:
      - register
      - '--non-interactive'
      - '--locked=false'
      - '--name=${RUNNER_NAME}'
      - '--executor=docker'
      - '--docker-image=docker:20-dind'
      - '--docker-volumes=/var/run/docker.sock:/var/run/docker.sock'
    volumes:
      - './gitlab-runner/config:/etc/gitlab-runner:z'
      - './data/dind/docker:/var/lib/docker'
  trino:
    image: 'trinodb/trino:403'
    container_name: trino
    hostname: trino
    networks:
      - aionet
    ports:
      - '8060:8080'
  analytical_db:
    image: 'postgres:15.1'
    hostname: analytical_db
    container_name: analytical_db
    environment:
      - POSTGRES_PASSWORD=$PG_DB_PASSWORD
      - POSTGRES_USER=$PG_DB_USER
      - POSTGRES_DB=$PG_DB_NAME
    networks:
      - aionet
    ports:
      - '5432:5432'
    shm_size: 4gb
    healthcheck:
      test:
        - CMD-SHELL
        - pg_isready -U $PG_DB_USER
      interval: 5s
      timeout: 5s
      retries: 5
  aio:
    image: >-
      registry.digitalocean.com/registry-thesis-dataops-prototyp-compose/aio:latest
    container_name: aio
    environment:
      - AWS_ACCESS_KEY_ID=$MINIO_ACCESS_KEY_ID
      - AWS_SECRET_ACCESS_KEY=$MINIO_SECRET_ACCESS_KEY
      - AWS_REGION=us-east-1
    volumes:
      - './data/html:/var/lib/beast/html'
      - './data/stage:/var/lib/beast/stage'
      - './data/spark/notebooks:/var/lib/beast/notebooks'
      - './projects/dagster:/var/lib/beast/dagster'
      - './projects/dbt:/var/lib/beast/dbt'
    ports:
      - '8888:8888'
      - '7077:7077'
      - '8061:8061'
      - '8062:8062'
      - '10000:10000'
      - '10009:10009'
      - '18080:18080'
      - '3070:3070'
      - '9083:9083'
    command:
      - notebook
    networks:
      aionet:
        aliases:
          - spark
          - dagster
          - dbt
          - metastore
          - aio
    depends_on:
      analytical_db:
        condition: service_healthy
      minio:
        condition: service_healthy
  superset:
    image: apache/superset
    container_name: superset
    hostname: superset
    expose:
      - '8088:8088'
    depends_on:
      analytical_db:
        condition: service_healthy
      minio:
        condition: service_healthy
  rocketchat:
    image: 'registry.rocket.chat/rocketchat/rocket.chat:${RELEASE:-latest}'
    restart: on-failure
    hostname: rocketchat
    container_name: rocketchat
    #labels:
    #  traefik.enable: 'true'
    #  traefik.http.routers.rocketchat.rule: 'Host(`${DOMAIN}`)'
    #  traefik.http.routers.rocketchat.tls: 'true'
    #  traefik.http.routers.rocketchat.entrypoints: https
    #  traefik.http.routers.rocketchat.tls.certresolver: le
    environment:
      MONGO_URL: >-
        ${MONGO_URL:-mongodb://${MONGODB_ADVERTISED_HOSTNAME:-mongodb}:${MONGODB_INITIAL_PRIMARY_PORT_NUMBER:-27017}/${MONGODB_DATABASE:-rocketchat}?replicaSet=${MONGODB_REPLICA_SET_NAME:-rs0}}
      MONGO_OPLOG_URL: >-
        ${MONGO_OPLOG_URL:-mongodb://${MONGODB_ADVERTISED_HOSTNAME:-mongodb}:${MONGODB_INITIAL_PRIMARY_PORT_NUMBER:-27017}/local?replicaSet=${MONGODB_REPLICA_SET_NAME:-rs0}}
      ROOT_URL: '${ROOT_URL:-http://$DOMAIN:${RC_HOST_PORT:-3000}}'
      PORT: '${PORT:-3000}'
      DEPLOY_METHOD: docker
      DEPLOY_PLATFORM: '${DEPLOY_PLATFORM}'
    depends_on:
      - mongodb
    expose:
      - '${RC_PORT:-3000}'
    ports:
      - '${BIND_IP:-0.0.0.0}:${RC_HOST_PORT:-3000}:${RC_PORT:-3000}'
  mongodb:
    image: 'docker.io/bitnami/mongodb:${MONGODB_VERSION:-4.4}'
    restart: on-failure
    hostname: mongodb
    container_name: rocketchat_mongo
    volumes:
      - 'mongodb_data:/bitnami/mongodb'
    environment:
      MONGODB_REPLICA_SET_MODE: primary
      MONGODB_REPLICA_SET_NAME: '${MONGODB_REPLICA_SET_NAME:-rs0}'
      MONGODB_PORT_NUMBER: '${MONGODB_PORT_NUMBER:-27017}'
      MONGODB_INITIAL_PRIMARY_HOST: '${MONGODB_INITIAL_PRIMARY_HOST:-mongodb}'
      MONGODB_INITIAL_PRIMARY_PORT_NUMBER: '${MONGODB_INITIAL_PRIMARY_PORT_NUMBER:-27017}'
      MONGODB_ADVERTISED_HOSTNAME: '${MONGODB_ADVERTISED_HOSTNAME:-mongodb}'
      MONGODB_ENABLE_JOURNAL: '${MONGODB_ENABLE_JOURNAL:-true}'
      ALLOW_EMPTY_PASSWORD: '${ALLOW_EMPTY_PASSWORD:-yes}'
networks:
  aionet:
    driver: bridge
volumes:
  mongodb_data: { driver: local }